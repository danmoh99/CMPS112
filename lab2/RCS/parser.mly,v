head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2019.01.24.21.15.38;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.01.23.23.50.19;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.01.23.23.45.16;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.01.18.19.49.38;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@/* $Id: parser.mly,v 1.3 2019-01-23 15:50:19-08 - - $ */

%{

let linenr () = (symbol_start_pos ()).Lexing.pos_lnum

let syntax () = Etc.syntax_error (symbol_start_pos ()) ["syntax error"]

%}

%token <string> RELOP EQUAL ADDOP MULOP POWOP
%token <string> IDENT NUMBER STRING
%token COLON COMMA LPAR RPAR LSUB RSUB EOL EOF
%token DIM LET GOTO IF PRINT INPUT

%type <Absyn.program> program

%start program

%%

program    : stmt_list EOF            {List.rev $1}

stmt_list  : stmt_list stmt EOL       {$2::$1}
           | stmt_list error EOL      {syntax (); $1}
           |                          {[]}

stmt       : label action             {(linenr (), Some $1, Some $2)}
           | action                   {(linenr (), None, Some $1)}
           | label                    {(linenr (), Some $1, None)}
           |                          {(linenr (), None, None)}

label      : IDENT COLON              {$1}

action     : DIM IDENT LSUB expr RSUB {Absyn.Dim ($2, $4)}
           | LET memref EQUAL expr    {Absyn.Let ($2, $4)}
           | GOTO IDENT               {Absyn.Goto $2}
           | IF relexpr GOTO IDENT    {Absyn.If ($2, $4)}
           | PRINT print_list         {Absyn.Print $2}
           | PRINT                    {Absyn.Print ([])}
           | INPUT input_list         {Absyn.Input $2}

print_list : print COMMA print_list   {$1::$3}
           | print                    {[$1]}

print      : expr                     {Absyn.Printexpr $1}
           | STRING                   {Absyn.String $1}

input_list : memref COMMA input_list  {$1::$3}
           | memref                   {[$1]}


memref     : IDENT                    {Absyn.Variable $1}
           | IDENT LSUB expr RSUB     {Absyn.Arrayref ($1, $3)}

relexpr    : expr RELOP expr          {Absyn.Binary ($2, $1, $3)}
           | expr EQUAL expr          {Absyn.Binary ($2, $1, $3)}

expr       : expr ADDOP term          {Absyn.Binary ($2, $1, $3)}
           | term                     {$1}

term       : term MULOP factor        {Absyn.Binary ($2, $1, $3)}
           | factor                   {$1}

factor     : primary POWOP factor     {Absyn.Binary ($2, $1, $3)}
           | primary                  {$1}

primary    : LPAR expr RPAR           {$2}
           | ADDOP primary            {Absyn.Unary ($1, $2)}
           | NUMBER                   {Absyn.Number (float_of_string $1)}
           | memref                   {Absyn.Memref $1}
           | IDENT LPAR expr RPAR     {Absyn.Unary ($1, $3)}

@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: parser.mly,v 1.2 2019-01-23 15:45:16-08 - - $ */
d56 2
a57 2
relexpr    : expr RELOP expr          {Absyn.Binop ($2, $1, $3)}
           | expr EQUAL expr          {Absyn.Binop ($2, $1, $3)}
d59 1
a59 1
expr       : expr ADDOP term          {Absyn.Binop ($2, $1, $3)}
d62 1
a62 1
term       : term MULOP factor        {Absyn.Binop ($2, $1, $3)}
d65 1
a65 1
factor     : primary POWOP factor     {Absyn.Binop ($2, $1, $3)}
d69 1
a69 1
           | ADDOP primary            {Absyn.Unop ($1, $2)}
d72 1
a72 1
           | IDENT LPAR expr RPAR     {Absyn.Fncall ($1, $3)}
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: parser.mly,v 1.1 2019-01-18 11:49:38-08 - - $ */
d22 1
a22 1
program    : stmt_list EOF           {List.rev $1}
d24 18
a41 18
stmt_list  : stmt_list stmt EOL      {$2::$1}
           | stmt_list error EOL     {syntax (); $1}
           |                         {[]}

stmt       : label action            {(linenr (), Some $1, Some $2)}
           | action                  {(linenr (), None, Some $1)}
           | label                   {(linenr (), Some $1, None)}
           |                         {(linenr (), None, None)}

label      : ident COLON             {$1}

action     : DIM arrayref            {Absyn.Dim $2}
           | LET memref EQUAL expr   {Absyn.Let ($2, $4)}
           | GOTO ident              {Absyn.Goto $2}
           | IF relexpr GOTO ident   {Absyn.If ($2, $4)}
           | PRINT print_list        {Absyn.Print $2}
           | PRINT                   {Absyn.Print ([])}
           | INPUT input_list        {Absyn.Input $2}
d43 2
a44 2
print_list : print COMMA print_list  {$1::$3}
           | print                   {[$1]}
d46 2
a47 2
print      : expr                    {Absyn.Printexpr $1}
           | STRING                  {Absyn.String $1}
d49 2
a50 2
input_list : memref COMMA input_list {$1::$3}
           | memref                  {[$1]}
d53 2
a54 2
memref     : ident                   {Absyn.Variable $1}
           | arrayref                {Absyn.Arrayref $1}
d56 2
a57 1
arrayref   : ident LSUB expr RSUB    {($1, $3)}
d59 2
a60 2
relexpr    : expr RELOP expr         {Absyn.Binop ($2, $1, $3)}
           | expr EQUAL expr         {Absyn.Binop ($2, $1, $3)}
d62 11
a72 16
expr       : expr ADDOP term         {Absyn.Binop ($2, $1, $3)}
           | term                    {$1}

term       : term MULOP factor       {Absyn.Binop ($2, $1, $3)}
           | factor                  {$1}

factor     : primary POWOP factor    {Absyn.Binop ($2, $1, $3)}
           | primary                 {$1}

primary    : LPAR expr RPAR          {$2}
           | ADDOP primary           {Absyn.Unop ($1, $2)}
           | NUMBER                  {Absyn.Number (float_of_string $1)}
           | memref                  {Absyn.Memref $1}
           | ident LPAR expr RPAR    {Absyn.Fncall ($1, $3)}

ident      : IDENT                   {$1}
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: parser.mly,v 1.10 2019-01-17 14:53:31-08 - - $ */
a76 6
           | DIM                     {"dim"}
           | GOTO                    {"goto"}
           | IF                      {"if"}
           | INPUT                   {"input"}
           | LET                     {"let"}
           | PRINT                   {"print"}
@
